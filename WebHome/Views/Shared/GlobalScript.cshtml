@using System.IO
@using System.Linq.Expressions


@using WebHome.Helper
@using ModelCore.Locale
@using WebHome.Models.ViewModel
@using ModelCore.Models.ViewModel
@using ModelCore.DataEntity
@using WebHome.Controllers
@{
    ModelSource<InvoiceItem> models;
    models = (ModelSource<InvoiceItem>)ViewContext.HttpContext.Items["Models"]!;
}
<script>
    var $currentModal;
    $(function () {
        $('input[type="button"]').addClass('btn');
        $('button').addClass('btn');
        //$('form').on('submit', function () {
        //    var $currentModal = showLoadingModal();
        //});
        $.datepicker.setDefaults($.datepicker.regional['zh-tw']);
        $('.form_date').datepicker({ showButtonPanel: true, changeYear: true, changeMonth: true, yearRange: '2012:+1' });
    });

    function clearErrors() {
        $('.error input,select,textarea').removeClass('error')
        $('label.error').remove();
    }

    function showInvoiceModal(docID) {
        var element = event.target;
        $.post('@Html.Raw(Url.Action("ShowInvoiceContent", "DataView"))', { 'docID': docID, 'DialogID': 'preivew' }, function (html) {
            //            $(element).after($(html).find("#mainContent"));
            $(html).dialog({
                width: 640,
                buttons: [
                    {
                        text: "關閉",
                        icons: {
                            primary: "ui-icon-close"
                        },
                        click: function () {
                            $(this).dialog("close");
                        }
                    }
                ]
            });
        });
    }

    function showAllowanceModal(docID) {
        showLoading();
        $.post('@Html.Raw(Url.Action("ShowAllowancePageView", "DataView"))', { 'id': docID }, function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
                alert(data.message);
            } else {
                $(data).dialog({
                    width: "auto",
                    buttons: [
                        {
                            text: "關閉",
                            icons: {
                                primary: "ui-icon-close"
                            },
                            click: function () {
                                $(this).dialog("close");
                            }
                        }
                    ]
                });
            }
        });
    }

    function showLoadingModal() {
        var $body = $('body');
        //var $modal = $('<div style="position: absolute;top: 0;left: 0;z-index: 1000;width: 100%;opacity: 0.5;filter: Alpha(opacity=50);background: gray;"><img src="../images/loading.gif" style="position: absolute;top:0;left:0;right:0;bottom:0;margin:auto;max-height:100%;max-width:100%;"></div>');
        var $modal = $('<div style="position: absolute;top: 0;left: 0;z-index: 1000;width: 100%;opacity: 0.5;filter: Alpha(opacity=50);background: gray;"><img src="../images/loading.gif" style="position: absolute;"></div>');
        var $img = $modal.find('img');
        $modal.css('height', $body.css('height'));
        $img.css('top', $body.scrollTop() + screen.height / 2 - 48);
        $img.css('left', screen.width / 2 - 24);
        $body.append($modal);
        return $modal;
    }

    function actionHandler(url, data, done, width, height, dialogTitle) {
        showLoading();
        $.post(url, data, function (html) {
            hideLoading();
            var $this = $('<div class="currentDialog">').append(html);
            $this.dialog({
                width: width,
                height: height,
                resizable: true,
                //modal: true,
                title: "<div class='modal-title'><h4><i class='fa fa-clock-o'></i>" + dialogTitle + "</h4></div>",
@*buttons: [
                        {
                            text: "關閉",
                            icons: {
                                primary: "ui-icon-close"
                            },
                            click: function () {
                                $(this).dialog("close").remove();
                            }
                        }
                    ],*@
                close: function (evt, ui) {
                    $this.remove();
                    if (typeof (done) == 'function') {
                        done();
                    }
                }
            });
    });
    }

    function commitAction(url, data, done) {
        clearErrors();
        showLoading();
        $.post(url, data, function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
                if (typeof (done) == 'function') {
                    done(data);
                }
            } else {
                $(data).appendTo($('body'));
            }
        });
    }

    function reportError(result) {
        actionHandler('@Html.Raw(Url.Action("ReportError", "Home"))', result, function () { }, 'auto', 'auto');
    }

    function invokeAction(url, data, done) {
        showLoading();
        $.post(url, data, function (data) {
            hideLoading();
            //console.log(data);
            if ($.isPlainObject(data)) {
                if (typeof (done) == 'function') {
                    done(data);
                }
            } else {
                var $data = $(data);
                $('body').append($data);
                if (typeof (done) == 'function') {
                    done($data);
                }
            }
        });
    }

    function validateForm(formElement) {
        var isValid = true;
        $(formElement).find('label.error').remove();
        $(formElement).find('.error').removeClass('error');
        $(formElement.elements).each(function (idx, elmt) {
            var $elmt = $(elmt);
            elmt.setCustomValidity('');
            if (!$elmt.is(':hidden') && $elmt.parents().filter(':hidden').length == 0 && !elmt.checkValidity()) {
                isValid = false;
                $elmt.addClass('error');
                if ($elmt.prop('placeholder')) {
                    //elmt.setCustomValidity($elmt.prop('placeholder'));
                    $('<label class="error"></label>').text($elmt.prop('placeholder'))
                        .insertAfter($elmt);
                }
            }
        });
        return isValid;
    }

    // 側選單切換
    function urlHandler(url) {
        window.location.href = url;
    }

    // 頁面載入時的狀態顯示
    window.addEventListener('load', () => {
        // 找出群組名稱: groupName及選項名稱: tabName
        const url = window.location.href;
        let githubURL = new URL(url);
        const { pathname, searchParams } = githubURL;
        const groupName = searchParams.get('group');
        const pathArray = pathname.split('/');
        pathArray.shift();
        let tabName = null;
        const hasReportIndex = pathArray.includes('ReportIndex');
        const hasQueryIndex = pathArray.includes('QueryIndex');
        if (hasReportIndex || hasQueryIndex) {
            tabName = pathArray[0];
        } else {
            tabName = pathArray.length > 1 ? pathArray[1] : pathArray[0];
        };
        console.log(pathArray, tabName, groupName);
        // 顯示狀態
        if (groupName) {
            this[groupName] = document.querySelector(`.${groupName}`);
            this[groupName].classList.remove('collapsed');
            this[groupName] = document.querySelector(`#${groupName}`);
            this[groupName].classList.add('show');

            this[tabName] = document.querySelector(`#${tabName}`);
            this[tabName].classList.add('active');
        }
    });
</script>
