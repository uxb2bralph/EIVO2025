@using System.IO
@using System.Linq.Expressions


@using ModelCore.Helper

@using WebHome.Helper
@using WebHome.Models
@using WebHome.Controllers
@using ModelCore.DataEntity
@using ModelCore.Helper
@using ModelCore.Locale
@using ModelCore.Security.MembershipManagement
@using ModelCore.Models.ViewModel
@using CommonLib.Core.Utility
@using CommonLib.Utility
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc.Razor

@using Newtonsoft.Json

<script src="~/js/jquery-3.7.1.js"></script>
<script src="~/js/bootstrap.bundle.min.js"></script>
<script src="~/js/jquery-ui/jquery-ui.js"></script>
<!-- flatpick plugin -->
<script src="~/js/flatpickr/flatpickr.js"></script>
<script src="~/js/flatpickr/zh-tw.js"></script>
@* <script type="text/javascript" src="../Scripts/jquery-ui-1.13.2.js"></script> *@
<script type="text/javascript" src="../Scripts/jquery.ui.datepicker-zh-TW.js"></script>
<script type="text/javascript" src="../Scripts/jquery.form.js"></script>
<script type="text/javascript" src="../Scripts/uxeivo.js"></script>
<script type="text/javascript" src="../Scripts/rwd-table.js"></script>
<script type="text/javascript" src="../Scripts/jquery.twbsPagination.js"></script>
<script type="text/javascript" src="../vendor/metisMenu/metisMenu.min.js"></script>
<script type="text/javascript" src="../Scripts/sb-admin-2.js"></script>
<script type="text/javascript" src="../Scripts/math.min.js"></script>
<script type="text/javascript" src="../Scripts/jquery.blockUI.js"></script>
<script type="text/javascript" src="../Scripts/jquery.cookie.js"></script>
<script type="text/javascript" src="../Scripts/linq.js"></script>
<script type="text/javascript" src="../Scripts/linq.jquery.js"></script>
<script type="text/javascript" src="../Scripts/stringformat-1.11.min.js"></script>

<script>

    var $global = (function () {
        var $printContainer = {};

        function doPrint2023($element, printDone) {

            $global.preview = window.open('', '_blank', 'popup');
            $element.find('style').attr('nonce', 'Y2hiY29kZQ==');
            $global.preview.document.write($element.html());
            $global.preview.document.write('<script nonce="Y2hiY29kZQ==">window.print();\<\/script>');

            setTimeout(function () {
                if (typeof printDone === "function") {
                    printDone();
                }
            }, 3000);

        }

        function doOpenToPrint(html, printDone) {

            $global.preview = window.open('', '_blank', 'popup');
            $global.preview.document.write(html);
            $global.preview.document.write('<script>window.print();\<\/script>');

            setTimeout(function () {
                if (typeof printDone === "function") {
                    printDone();
                }
            }, 3000);

        }

        function doPrint($element, printDone) {

            if ($printContainer.$prnFrame) {
                $printContainer.$prnFrame.remove();
            }

            var strFrameName = ("printer-" + (new Date()).getTime());
            var jFrame = $("<iframe name='" + strFrameName + "'>");

            jFrame
                .css("width", "1px")
                .css("height", "1px")
                .css("position", "absolute")
                .css("display", "none")
                .appendTo($("body:first"));

            var objFrame = window.frames[strFrameName];
            $printContainer.$prnFrame = jFrame;

            var objDoc = objFrame.document;
            objDoc.write($printContainer.documentTemplate);
            var container = null;
            var count = 0;
            while (container == null && count < 100) {
                container = objDoc.getElementById('printContainer');
                count++;
            }

            if (container == null) {
                alert('列印失敗!! 請重試...');
            }

            $element.find('style').attr('nonce', 'Y2hiY29kZQ==');
            var $nodes = $.parseHTML($element.html(), objDoc, true);
            $nodes.forEach(function (node, index) {
                if (node.nodeName.toLowerCase() == 'script') {
                    var s = objDoc.createElement('script');
                    s.innerText = node.innerText;
                    container.appendChild(s);
                } else {
                    container.appendChild(node);
                }
            });

            objFrame.focus();
            setTimeout(function () {
                objFrame.print();
                if (typeof printDone === "function") {
                    printDone();
                }
            }, 3000);

        }

        function doPrintHtml(html, printDone) {

            var old = document.querySelector('iframe[name="prnFrame"]');
            if (old) {
                old.remove();
            }

            var jFrame = $("<iframe name='prnFrame'>");

            jFrame
                .css("width", "1px")
                .css("height", "1px")
                .css("position", "absolute")
                .css("display", "none")
                .appendTo($("body:first"));

            $printContainer.objFrame = window.frames['prnFrame'];
            $printContainer.objDoc = $printContainer.objFrame.document;

            $printContainer.objDoc.write(html);

            $printContainer.objFrame.focus();
            setTimeout(function () {
                $printContainer.objFrame.print();
                if (typeof printDone === "function") {
                    printDone();
                }
            }, 3000);

        }

        return {
            registerCloseEvent: function ($tab) {
                $tab.find(".closeTab").click(function () {

                    //there are multiple elements which has .closeTab icon so close the tab whose close icon is clicked
                    var tabContentId = $(this).parent().attr("href");
                    $(this).parent().parent().remove(); //remove li of tab
                    $('#masterTab a:last').tab('show'); // Select first tab
                    $(tabContentId).remove(); //remove respective tab content

                });
            },
            removeTab: function (tabId) {
                var $a = $('#masterTab a[href="#' + tabId + '"]');
                $a.parent().remove(); //remove li of tab
                $('#masterTab a:last').tab('show'); // Select first tab
                $('#' + tabId).remove(); //remove respective tab content
            },
            showTab: function (tabId) {
                $('#masterTab a[href="#' + tabId + '"]').tab('show');
            },
            createTab: function (tabId, tabText, tabContent, show) {
                console.log({ tabId, tabText, tabContent, show });
                showLoading();
                this.removeTab(tabId);

                var newTab = $('<li role="presentation"></li>')
                    .append($('<a class="tab-link" role="tab" data-toggle="tab"></a>')
                        .attr('href', '#' + tabId)
                        .attr('aria-controls', tabId)
                        .text(tabText)
                        .append($('<button class="close closeTab"><i class="fa fa-times" aria-hidden="true"></i></button>')));
                newTab.appendTo($('#masterTab'));
                $('<div role="tabpanel" class="tab-pane"></div>').attr('id', tabId)
                    .append(tabContent).appendTo($('#masterTabContent'));
                this.registerCloseEvent(newTab);
                if (show)
                    this.showTab(tabId);
                hideLoading();
            },
            createModal: function (tabId, tabText, tabContent, show) {
                $('#' + tabId).remove(); // remove existing modal with the same id

                const newModal = $('<div class="modal fade" id="' + tabId + '" tabindex="-1" role="dialog" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="' + tabId + 'Label" aria-hidden="true"></div>');
                newModal.append($('<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl"></div>')
                    .append($('<div class="modal-content"></div>')
                        .append($('<div class="modal-header"></div>')
                            .append($('<h5 class="modal-title fw-bold text-primary" id="' + tabId + 'Label"></h5>').text(tabText))
                            .append($('<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>')))
                        .append($('<div class="modal-body"></div>').append(tabContent))));
                $('body').append(newModal);

                const dateAuthorizationAlert = document.querySelector("#dateAuthorizationAlert");
                const dateInvoiceRequestAlert = document.querySelector("#dateInvoiceRequestAlert");
                newModal.modal('show');
            },
            onReady: [],
            nothingToken: false,
            doNothing: function () {
                this.nothingToken = true;
                $.post('@Html.Raw(Url.Action("SystemInfo", "Home"))', null, function (data) {
                    if ($.isPlainObject(data)) {
                        console.log(data);
                    }
                    if ($global.nothingToken) {
                        setTimeout($global.doNothing, 30000);
                    }
                });
            },
            printContent: function ($element, printDone) {
                if ($printContainer == undefined) {
                    showLoading();
                    $.post('<%= Html.Raw(Url.Action("PrintPage", "Helper")) %>', {}, function (data) {
                        hideLoading();
                        if ($.isPlainObject(data)) {
                            alertModal("無法取得列印文件!!");
                        } else {
                            $printContainer = { 'documentTemplate': data };
                            doPrint($element, printDone);
                        }
                    });
                } else {
                    doPrint($element, printDone);
                }
            },
            printHtml: function (html, printDone) {
                doPrintHtml(html, printDone);
            },
            openToPrintHtml: function (html, printDone) {
                doOpenToPrint(html, printDone);
            },
            getPrintArea: function ($element) {
                var $printArea = $element.find('#printArea');
                if ($printArea.length > 0) {
                    return $printArea;
                }

                var $div = $('<div></div>').append($element);
                $printArea = $div.find('#printArea');
                if ($printArea.length > 0) {
                    return $printArea;
                } else {
                    return $element;
                }
            },
        };
    })();

    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };

    $.fn.launchDownload = function (url, params, target, loading) {

        var data = this.serializeObject();
        if (params) {
            $.extend(data, params);
        }

        if (loading) {
            token = (new Date()).getTime();
            data.FileDownloadToken = token;
        }

        var form = $('<form></form>').attr('action', url).attr('method', 'post');//.attr('target', '_blank');
        if (target) {
            form.attr('target', target);
            if (window.frames[target] == null) {
                $('<iframe>')
                    .css('display', 'none')
                    .attr('name', target).appendTo($('body'));
            }
        }

        Object.keys(data).forEach(function (key) {
            var value = data[key];

            if (value instanceof Array) {
                value.forEach(function (v) {
                    form.append($("<input></input>").attr('type', 'hidden').attr('name', key).attr('value', v));
                });
            } else {
                form.append($("<input></input>").attr('type', 'hidden').attr('name', key).attr('value', value));
            }

        });

        if (loading) {
            showLoading();
            fileDownloadCheckTimer = window.setInterval(function () {
                var cookieValue = $.cookie('FileDownloadToken');
                if (cookieValue == token)
                    finishDownload();
            }, 1000);
        }

        //send request
        form.appendTo('body').submit().remove();
    };

    function finishDownload() {
        window.clearInterval(fileDownloadCheckTimer);
        $.removeCookie('fileDownloadToken'); //clears this cookie value
        hideLoading();
    }


    // Dialog 遮罩
    function showLoading(autoHide, onBlock) {
        $.blockUI({
            message: `<i class="my-2 fas fa-cog fa-spin" style="font-size:2.5rem"></i><h4>Loading...</h4>`,
            css: {
                border: 'none',
                padding: '15px 20px',
                backgroundColor: '#000',
                'border-radius': '10px',
                opacity: .45,
                color: '#fff',
                width: '15%',
                top: '50%',
                left: '50%',
                transform: `translate(-50%, -50%)`,
            },
            // 背景圖層
            overlayCSS: {
                backgroundColor: '#3276B1',
                opacity: 0.6,
                cursor: 'wait'
            },
            onBlock: onBlock
        });

        if (autoHide)
            setTimeout($.unblockUI, 5000);
    }

    function hideLoading() {
        $.unblockUI();
    }

    function initSort(sort, offset) {

        $('.itemList th').each(function (idx, elmt) {
            var $this = $(this);
            if (sort.indexOf(idx + offset) >= 0) {
                $this.attr('aria-sort', 'ascending');
                $this.append('<i class="fa fa-sort-asc" aria-hidden="true"></i>')
                    .append($('<input type="hidden" name="sort"/>').val(idx + offset));
            } else if (sort.indexOf(-idx - offset) >= 0) {
                $this.attr('aria-sort', 'desending');
                $this.append('<i class="fa fa-sort-desc" aria-hidden="true"></i>')
                    .append($('<input type="hidden" name="sort"/>').val(-idx - offset));
            }
        });
    }

    function buildSort(inquire, currentPageIndex, offset) {

        var chkBox = $("#itemList input[name='chkAll']");
        var chkItem = $("#itemList input[name='chkItem']");
        chkBox.click(function () {
            chkItem.prop('checked', chkBox.is(':checked'));
        });

        chkItem.click(function (e) {
            if (!$(this).is(':checked')) {
                chkBox.prop('checked', false);
            }
        });

        $('#itemList th').each(function (idx, elmt) {
            var $this = $(this);
            if (!$this.is('[aria-sort="other"]')) {
                // 需排序的欄位加箭頭圖示
                if (!$this.is('[aria-sort]')) {
                    $this.append('<i class="fa fa-sort ms-1" aria-hidden="true"></i>')
                        .append('<input type="hidden" name="sort"/>');
                    $this.attr('aria-sort', 'none');
                };

                $this.on('click', function (evt) {
                    var $target = $(this);

                    $target.find('i').remove();
                    if ($target.is('[aria-sort="none"]')) {
                        $target.append('<i class="fas fa-sort-down" aria-hidden="true"></i>');
                        $target.attr('aria-sort', 'ascending');
                        $target.find('input[name="sort"]').val(idx + offset);
                    } else if ($target.is('[aria-sort="ascending"]')) {
                        $target.append('<i class="fas fa-sort-up" aria-hidden="true"></i>');
                        $target.attr('aria-sort', 'descending');
                        $target.find('input[name="sort"]').val(-idx - offset);
                    } else {
                        $target.append('<i class="fa fa-sort" aria-hidden="true"></i>');
                        $target.attr('aria-sort', 'none');
                        $target.find('input[name="sort"]').val('');
                    }

                    inquire(currentPageIndex, function (data) {
                        var $node = $('#itemList').parent('#queryArea');
                        $('#itemList').remove();
                        $node.append(data);
                    });
                });
            }
        });
    }

    function initSortable($table, inquire, currentPageIndex, sort) {

        $table.find('th').each(function (index, elmt) {
            var $this = $(this);
            var idx = 0;
            if (!$this.is('[aria-sort="other"]')) {
                if (!$this.is('[aria-sort]')) {
                    $this.append('<i class="fa fa-sort" aria-hidden="true"></i>')
                    $this.attr('aria-sort', 'none');
                }

                if ($this.is('[data-sort]')) {
                    idx = $this.attr('data-sort');
                    if (!isNaN(idx)) {
                        idx = Number(idx);
                    } else {
                        idx = index > 0 ? index : 99999;
                    }
                }

                $this.on('click', function (evt) {
                    var $target = $(this);
                    $target.find('i').remove();
                    if ($target.is('[aria-sort="none"]')) {
                        $target.append('<i class="fa fa-sort-asc" aria-hidden="true"></i>');
                        $target.attr('aria-sort', 'ascending');
                        var sortIdx = idx + 0;
                        if (sort.indexOf(sortIdx) < 0) {
                            sort.push(sortIdx);
                        }
                    } else if ($target.is('[aria-sort="ascending"]')) {
                        $target.append('<i class="fa fa-sort-desc" aria-hidden="true"></i>');
                        $target.attr('aria-sort', 'descending');
                        var sortIdx = idx + 0;
                        var curr = sort.indexOf(sortIdx);
                        if (curr >= 0) {
                            sort[curr] = -sortIdx;
                        }
                    } else {
                        $target.append('<i class="fa fa-sort" aria-hidden="true"></i>');
                        $target.attr('aria-sort', 'none');
                        var sortIdx = -idx - 0;
                        var curr = sort.indexOf(sortIdx);
                        if (curr >= 0) {
                            sort.splice(curr, 1);
                        }
                    }

                    inquire(currentPageIndex);
                });
            }
        });
    }

    // 日期選擇器
    //function datepicker($items) {
    //    $items.datepicker({ showButtonPanel: true, changeYear: true, changeMonth: true, yearRange: '2012:+1' });
    //}

    //$(function () {
    //    $('input[type="button"]').addClass('btn');
    //    $('button').addClass('btn');
    //    //$.datepicker.setDefaults($.datepicker.regional['zh-tw']);
    //    datepicker($('.form_date'));
    //});

    $.widget("ui.dialog", $.extend({}, $.ui.dialog.prototype, {
        _title: function (title) {
            if (!this.options.title) {
                title.html("&#160;");
            } else {
                title.html(this.options.title);
            }
        }
    }));

    // flatpickr 日期選擇器
    //const currentTime = new Date()
    const config = {
        locale: 'zh_tw',
        //enableTime: true, //可選時與分
        dateFormat: "Y/m/d", //時間格式
        time_24hr: true, //24 時制
        minuteIncrement: 15, //分鐘每次選擇間隔單位
        allowInput: true, //可輸入控制
        //minDate: "today", //可選最小時間，可直接接受 'today' 字串
        //maxDate: currentTime.setMonth(currentTime.getMonth() + 1), //可選最大時間，從今天起一個月
        onChange: function (selectedDates, dateStr, instance) {
            console.log(`你現在點選的是 ${instance.input.id}，時間為 ${selectedDates} / ${dateStr}`);
            checkDateTime(dateStr, instance.input.id);
        }
    };
    let startDateValue = null;
    let endDateValue = null;
    let startAuthorizationDateValue = null;
    let endAuthorizationDateValue = null;
    let startInvoiceRequestDateValue = null;
    let endInvoiceRequestDateValue = null;

    // 辨別結束日期須晚於開始日期
    function checkDateTime(dateStr, id) {
        if (id === "DateFrom") {
            startDateValue = dateStr;
        };
        if (id === "DateTo") {
            endDateValue = dateStr;
        };
        if (startDateValue && endDateValue) {
            if (startDateValue > endDateValue) {
                dateAlert.classList.remove("d-none");
            } else {
                dateAlert.classList.add("d-none");
            }
        };

        // 授權期間
        if (id === "AuthorizationNotBefore") {
            startAuthorizationDateValue = dateStr;
        };
        if (id === "AuthorizationNotAfter") {
            endAuthorizationDateValue = dateStr;
        };

        if (startAuthorizationDateValue && endAuthorizationDateValue) {
            if (startAuthorizationDateValue > endAuthorizationDateValue) {
                dateAuthorizationAlert.classList.remove("d-none");
            } else {
                dateAuthorizationAlert.classList.add("d-none");
            }
        };

        // 發票期間
        if (id === "InvoiceRequestNotBefore") {
            startInvoiceRequestDateValue = dateStr;
        };
        if (id === "InvoiceRequestNotAfter") {
            endInvoiceRequestDateValue = dateStr;
        };
        if (startInvoiceRequestDateValue && endInvoiceRequestDateValue) {
            if (startInvoiceRequestDateValue > endInvoiceRequestDateValue) {
                dateInvoiceRequestAlert.classList.remove("d-none");
            } else {
                dateInvoiceRequestAlert.classList.add("d-none");
            }
        };


    };


    function uploadFile($file, postData, url, callback, errorback) {

        $('<form method="post" enctype="multipart/form-data"></form>')
            .append($file).ajaxForm({
                url: url,
                data: postData,
                beforeSubmit: function () {
                    showLoading();
                },
                success: function (data) {
                    hideLoading();
                    callback(data);
                },
                error: function () {
                    hideLoading();
                    errorback();
                }
            }).submit();
    }

    // 訊息視窗
    function alertModal(alertMessage) {
        $('<div>' + alertMessage + '</div>')
            .dialog({ "title": "<div class='modal-title'><h4><i class='fa fa-clock-o'></i>訊息</h4></div>" });
    }

    function ajaxSubmitForm(form) {
        $(form).ajaxSubmit({
            beforeSubmit: function () {
                showLoading();
            },
            success: function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    if (form.done) {
                        form.done(data);
                    } else if (data.message) {
                        alert(data.message);
                    }
                } else {
                    if (form.done) {
                        form.done(data);
                    } else {
                        $(data).appendTo($('body'));
                    }
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                hideLoading();
                console.log(xhr.status);
                console.log(thrownError);
            }
        });
    }

    function doPost(url, viewModel, done) {
        showLoading();
        $.ajax({
            type: 'POST',
            url: url,
            data: JSON.stringify(viewModel),
            type: "POST",
            //dataType: "json",
            contentType: "application/json;charset=utf-8",
            success: function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    if (data.result) {
                        if (done) {
                            done(data);
                        }
                    } else {
                        alert(data.message);
                    }
                } else {
                    if (done) {
                        done(data);
                    }
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                hideLoading();
                console.log(xhr.status);
                console.log(thrownError);
            }
        });
    }


</script>