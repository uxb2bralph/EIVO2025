@using System.IO
@using System.Linq.Expressions


@using ModelCore.Helper

@using WebHome.Helper
@using WebHome.Models
@using WebHome.Controllers
@using ModelCore.DataEntity
@using ModelCore.Locale
@using ModelCore.Security.MembershipManagement
@using ModelCore.Models.ViewModel
@using CommonLib.Core.Utility
@using CommonLib.Utility
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc.Razor

@using Newtonsoft.Json

@using CommonLib.DataAccess
@{

    _model = (IQueryable<InvoiceTrackCode>)this.Model;
    _viewModel = (QueryViewModel)ViewBag.ViewModel;
    _sort = (int[])ViewBag.Sort;
    _pageSize = _viewModel.PageSize ?? 10;
    _viewModel.PageIndex = _viewModel.PageIndex ?? 0;

    if (_sort != null && _sort.Length > 0)
    {
        sorting();

        if (_order == null)
        {
            _items = _model.Skip(_viewModel.PageIndex.Value * _pageSize)
            .Take(_pageSize);
        }
        else
        {
            _items = _order.Skip(_viewModel.PageIndex.Value * _pageSize)
            .Take(_pageSize);
        }
    }
    else
    {
        _items = _model.Skip(_viewModel.PageIndex.Value * _pageSize)
        .Take(_pageSize);
    }
}
@{
    int idx = 0;
}
@foreach (var item in _items)
{
    idx++;
    await Html.RenderPartialAsync("~/Views/TrackCode/Module/DataItem.cshtml", item);
}

@functions
{

    IQueryable<InvoiceTrackCode> _items;
    IQueryable<InvoiceTrackCode> _model;
    IOrderedQueryable<InvoiceTrackCode> _order;
    QueryViewModel _viewModel;
    int[] _sort;
    int _pageSize;

    void sorting()
    {
        foreach (var idx in _sort)
        {
            switch (idx)
            {
                case 2:
                    _order = _order == null ? _model.OrderBy(i => i.PeriodNo) : _order.ThenBy(i => i.PeriodNo);
                    break;
                case -2:
                    _order = _order == null ? _model.OrderByDescending(i => i.PeriodNo) : _order.ThenByDescending(i => i.PeriodNo);
                    break;
                case 3:
                    _order = _order == null ? _model.OrderBy(i => i.TrackCode) : _order.ThenBy(i => i.TrackCode);
                    break;
                case -3:
                    _order = _order == null ? _model.OrderByDescending(i => i.TrackCode) : _order.ThenByDescending(i => i.TrackCode);
                    break;
            }
        }
    }

}
