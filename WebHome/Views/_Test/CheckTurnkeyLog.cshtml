@using System.IO
@using System.Linq.Expressions
@using System.Data
@using System.Text
@using WebHome.Helper
@using ModelCore.Locale
@using WebHome.Models.ViewModel
@using ModelCore.Models.ViewModel
@using ModelCore.DataEntity
@using ModelCore.Helper

@using WebHome.Controllers
@using CommonLib.Core.Utility
@using CommonLib.Utility
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc.Razor
@using CommonLib.DataAccess
@using Newtonsoft.Json

@functions
{
    ModelStateDictionary _modelState;
    ModelSource<InvoiceItem> models;

    class TurnkeyLogViewModel : V_Invoice
    {
        public string AllowanceNo { get; set; }
    }

}

@{
    _modelState = (ModelStateDictionary)ViewBag.ModelState ?? ViewContext.ViewData.ModelState;
    models = (ModelSource<InvoiceItem>)ViewContext.HttpContext.Items["Models"]!;

    TurnkeyLogViewModel _viewModel = new TurnkeyLogViewModel();
    ((SampleController<InvoiceItem>)ViewContext.HttpContext.Items["Controller"]).BuildViewModel(_viewModel);

    var Response = Context.Response;
    _viewModel.InvoiceNo = _viewModel.InvoiceNo.GetEfficientString();
    _viewModel.DocType = _viewModel.DocType.GetEfficientString();

    Response.Clear();

    Response.Headers.Clear();
    Response.ContentType = "application/json";

    using (TurnKey2DataContext turnkeyDB = new TurnKey2DataContext())
    {
        IQueryable<V_Allowance> allowanceItems =
            turnkeyDB.GetTable<V_Allowance>()
                .Where(i => i.AllowanceNo == _viewModel.AllowanceNo);

        IQueryable<V_Invoice> items =
            turnkeyDB.GetTable<V_Invoice>()
                .Where(i => i.InvoiceNo == _viewModel.InvoiceNo);

        switch (_viewModel.DocType)
        {
            case "D0401":
            case "D0501":
            case "B0401":
            case "B0501":
                //allowanceItems = allowanceItems.Where(i => i.DocType == _viewModel.DocType);
                await Response.WriteAsync(allowanceItems.OrderByDescending(i => i.MESSAGE_DTS).JsonStringify());
                break;

            case "Allowance":
                await Response.WriteAsync(allowanceItems.OrderByDescending(i => i.MESSAGE_DTS).JsonStringify());
                break;

            case "C0401":
            case "C0501":
            case "A0401":
            case "A0501":
                //items = items.Where(i => i.DocType == _viewModel.DocType);
                await Response.WriteAsync(items.OrderByDescending(i => i.MESSAGE_DTS).JsonStringify());
                break;

            case "Invoice":
                await Response.WriteAsync(items.OrderByDescending(i => i.MESSAGE_DTS).JsonStringify());
                break;

        }

    }


}
